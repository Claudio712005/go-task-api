// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/autenticar": {
            "post": {
                "description": "Autentica um usuário no sistema e retorna um token JWT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Autenticação"
                ],
                "summary": "Autentica um usuário",
                "parameters": [
                    {
                        "description": "Dados de login do usuário",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Usuário autenticado com sucesso",
                        "schema": {
                            "$ref": "#/definitions/util.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Dados inválidos",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Senha incorreta",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Usuário não encontrado",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Erro interno",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/usuarios": {
            "post": {
                "description": "Cadastra um novo usuário no sistema",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usuários"
                ],
                "summary": "Cadastra um novo usuário",
                "parameters": [
                    {
                        "description": "Dados do usuário",
                        "name": "usuario",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Usuario"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Usuário cadastrado com sucesso",
                        "schema": {
                            "$ref": "#/definitions/util.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Dados inválidos",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Usuário já cadastrado",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Erro interno",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/usuarios/{id}": {
            "get": {
                "description": "Busca um usuário pelo ID fornecido",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usuários"
                ],
                "summary": "Busca um usuário pelo ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID do usuário",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Usuário encontrado",
                        "schema": {
                            "$ref": "#/definitions/util.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Usuário não encontrado",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Erro interno",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Login": {
            "type": "object",
            "required": [
                "email",
                "senha"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "senha": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "models.Usuario": {
            "type": "object",
            "required": [
                "email",
                "nome",
                "senha"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "nome": {
                    "type": "string",
                    "minLength": 3
                },
                "senha": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "util.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Erro"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "util.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Go Task API",
	Description:      "Esta é a API de gerenciamento de tarefas",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
